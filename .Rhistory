dplyr::filter(max_deaths == max(max_deaths)) %>% dplyr::filter(max_cases == max(max_cases)) %>%
dplyr::select(county) %>% pull()
count_highest_cases <- counties %>% group_by(county) %>%
dplyr::summarise(max_cases = max(cases)) %>% dplyr::arrange(desc(max_cases)) %>%
dplyr::filter(max_cases == max(max_cases)) %>% dplyr::select(county) %>% pull()
count_highest_cases <- counties %>% group_by(county) %>%
dplyr::summarise(max_cases = max(cases)) %>% dplyr::arrange(desc(max_cases)) %>%
dplyr::filter(max_cases == max(max_cases)) %>% dplyr::select(county) %>% pull()
counties %>% group_by(county) %>%
dplyr::summarise(max_cases = max(cases)) %>% dplyr::arrange(desc(max_cases)) %>%
dplyr::filter(max_cases == max(max_cases)) %>% dplyr::select(county) %>% pull()
counties %>% group_by(county_state) %>%
dplyr::summarise(max_deaths = max(deaths)) %>% dplyr::arrange(desc(max_deaths)) %>%
dplyr::filter(max_deaths == max(max_deaths)) %>%
dplyr::select(county) %>% pull()
counties %>% group_by(county_state) %>%
dplyr::summarise(max_deaths = max(deaths)) %>% dplyr::arrange(desc(max_deaths)) %>%
dplyr::filter(max_deaths == max(max_deaths)) %>%
dplyr::select(county_state) %>% pull()
counties %>% group_by(county_state) %>%
dplyr::summarise(max_deaths = max(deaths)) %>% dplyr::arrange(desc(max_deaths)) %>%
dplyr::filter(max_deaths == max(max_deaths))
counties %>% group_by(county_state) %>%
dplyr::summarise(max_deaths = max(deaths)) %>% dplyr::arrange(desc(max_deaths)) %>%
counties %>% group_by(county_state) %>%
dplyr::summarise(max_deaths = max(deaths)) %>% dplyr::arrange(desc(max_deaths))
counties %>% group_by(county_state) %>%
dplyr::summarise(max_deaths = max(deaths)) %>%
dplyr::filter(max_deaths == max(max_deaths))
counties %>% group_by(county_state) %>%
dplyr::summarise(max_deaths = max(deaths)) %>% dplyr::arrange(desc(max_deaths)) %>%
dplyr::filter(county_state == "New York City, New York") %>%
dplyr::select(county_state) %>% pull()
location_most_deaths <- counties %>% group_by(county_state) %>%
dplyr::summarise(max_deaths = max(deaths)) %>% dplyr::arrange(desc(max_deaths)) %>%
dplyr::filter(county_state == "New York City, New York") %>%
dplyr::select(county_state) %>% pull()
mutate(national, new_cases = lag(cases))
mutate(national, new_cases = lag(cases - cases))
national <- mutate(national, new_cases = lag(cases - lag(cases)))
mutate(national, new_cases = lag(cases - lag(cases)))
mutate(national, new_cases = lag(lead(cases) - cases))
national <- mutate(national, new_cases = lag(lead(cases) - cases))
mutate(national, new_deaths = lag(lead(deaths) - deaths))
national <- mutate(national, new_deaths = lag(lead(deaths) - deaths))
national %>% summarise(max_newcases = max(new_cases))
national %>% summarise(max_newcases = max(na.omit(new_cases)))
national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases)))
national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases))) %>% arrange(desc(max_newcases))
national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases))) %>% arrange(desc(max_newcases)) %>%
filter(max_newcases == max(max_newcases))
date_most_cases <- national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases))) %>% arrange(desc(max_newcases)) %>%
filter(max_newcases == max(max_newcases)) %>% select(as.Date(date)) %>% pull()
national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases))) %>% arrange(desc(max_newcases)) %>%
filter(max_newcases == max(max_newcases)) %>% select(date) %>% pull()
national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases))) %>% arrange(desc(max_newcases)) %>%
filter(max_newcases == max(max_newcases)) %>% select(as.Date(date)) %>% pull()
national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases))) %>% arrange(desc(max_newcases)) %>%
filter(max_newcases == max(max_newcases)) %>% pull()
national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases))) %>% arrange(desc(max_newcases)) %>%
filter(max_newcases == max(max_newcases)) %>% select(-max_newcases) %>% pull()
date_most_cases <- national %>% group_by(as.Date(date)) %>%
summarise(max_newcases = max(na.omit(new_cases))) %>% arrange(desc(max_newcases)) %>%
filter(max_newcases == max(max_newcases)) %>% select(-max_newcases) %>% pull()
national %>% group_by(as.Date(date)) %>%
summarise(max_newdeaths = max(na.omit(new_deaths))) %>% arrange(desc(max_newdeaths)) %>%
filter(max_newdeaths == max(max_newdeaths))
date_most_deaths <- national %>% group_by(as.Date(date)) %>%
summarise(max_newdeaths = max(na.omit(new_deaths))) %>% arrange(desc(max_newdeaths)) %>%
filter(max_newdeaths == max(max_newdeaths)) %>% select(-max_newdeaths) %>% pull()
national %>% group_by(as.Date(date)) %>%
summarise(max_newdeaths = max(na.omit(new_deaths))) %>% arrange(desc(max_newdeaths))
date_most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(max_newdeaths)) %>%
dplyr::select(-max_newdeaths) %>% pull()
national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(max_newdeaths)) %>%
dplyr::select(-max_newdeaths) %>% pull()
date_most_cases <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newcases = max(na.omit(new_cases))) %>%
dplyr::arrange(desc(max_newcases)) %>%
dplyr::filter(max_newcases == max(max_newcases)) %>%
dplyr::select(-max_newcases) %>% pull()
national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newcases = max(na.omit(new_cases))) %>%
dplyr::arrange(desc(max_newcases))
date_most_cases <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newcases = max(na.omit(new_cases))) %>%
dplyr::arrange(desc(max_newcases)) %>%
dplyr::filter(max_newcases == max(max_newcases)) %>%
dplyr::select(-max_newcases) %>% pull()
date_most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(max_newdeaths)) %>%
dplyr::select(-max_newdeaths) %>% pull()
states %>% group_by(state) %>% dplyr::filter(date == max(as.Date(date))) %>%
dplyr::arrange(cases)
national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(-max_newdeaths) %>% pull()
date_most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(-max_newdeaths) %>% pull()
national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths)))
national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
counties %>% group_by(state) %>% summarise(max_cases = max(cases))
counties %>% summarise(max_cases = max(cases))
counties %>% group_by(state, county) %>% summarise(max_cases = max(cases))
counties %>% group_by(state, county) %>% filter(max_cases ==  max(cases))
counties %>% group_by(state, county) %>% summarise(max_cases = max(cases)) %>$ filter(max_cases == max(max_cases))
counties %>% group_by(state, county) %>% summarise(max_cases = max(cases)) %>% filter(max_cases == max(max_cases))
data.frame(counties %>% group_by(state, county) %>% summarise(max_cases = max(cases)) %>% filter(max_cases == max(max_cases)))
highest_cases_in_each_state <- counties %>% data.frame(counties %>%
group_by(state, county) %>% dplyr::summarise(max_cases = max(cases)) %>%
dplyr::filter(max_cases == max(max_cases)))
data.frame(counties %>%
+ group_by(state, county) %>% dplyr::summarise(max_cases = max(cases)) %>%
+ dplyr::filter(max_cases == max(max_cases)))
data.frame(counties %>%
group_by(state, county) %>% dplyr::summarise(max_cases = max(cases)) %>%
dplyr::filter(max_cases == max(max_cases)))
highest_cases_in_each_state <- data.frame(counties %>%
group_by(state, county) %>% dplyr::summarise(max_cases = max(cases)) %>%
dplyr::filter(max_cases == max(max_cases)))
counties %>% group_by(state, county) %>%
dplyr::summarize(min_deaths = min(deaths)) %>%
dplyr::filter(min_deaths == min(min_deaths)
counties %>% group_by(state, county) %>%
dplyr::summarize(min_deaths = min(deaths)) %>%
dplyr::filter(min_deaths == min(min_deaths))
lowest_deaths_in_each_state <- data.frame(counties %>% group_by(state, county) %>%
dplyr::summarize(min_deaths = min(deaths)) %>%
dplyr::filter(min_deaths == min(min_deaths)))
View(lowest_deaths_in_each_state)
counties %>% group_by(as.Date(date)) %>% dplyr::cumsum(cases)
counties %>% group_by(as.Date(date)) %>% cumsum(cases)
counties %>% group_by(as.Date(date)) %>% dplyr::cumsum(cases)
counties %>% group_by(as.Date(date)) %>% sum(cases)
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
counties <- dplyr::mutate(counties, county_state = paste0(county, ", ", state))
counties %>% group_by(as.Date(date)) %>% sum(cases)
counties %>% group_by(as.Date(date)) %>% cumsum(cases)
counties %>% group_by(as.Date(date)) %>% select(cases)
counties %>% group_by(as.Date(date)) %>% dplyr::select(cases) %>% cumsum(cases)
counties %>% group_by(as.Date(date)) %>% dplyr::transmute(counties, county_total_cases = cumsum(cases))
counties %>% group_by(as.Date(date)) %>% dplyr::transmute(county_total_cases = cumsum(cases))
counties %>% group_by(as.Date(date)) %>% dplyr::transmute(county_total_cases = sum(cases))
counties %>% group_by(as.Date(date)) %>% dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct()
data.frame(counties %>% group_by(as.Date(date)) %>%
dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct())
data.frame(counties %>% group_by(date = as.Date(date)) %>%
dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct())
total_cases_counties <- data.frame(counties %>% group_by(date = as.Date(date)) %>%
dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct())
dplyr::full_join(national, total_cases_counties)
total_cases_counties <- data.frame(counties %>% group_by(date) %>%
dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct())
total_cases_counties <- data.frame(counties %>% group_by(date) %>%
dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct())
total_cases_counties <- data.frame(counties %>% group_by(date) %>%
dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct())
total_cases_counties <- data.frame(counties %>% group_by(date) %>%
dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct())
total_cases_counties <- data.frame(counties %>% group_by(date) %>%
dplyr::transmute(county_total_cases = sum(cases)) %>% dplyr::distinct())
dplyr::full_join(national, total_cases_counties)
all_totals <- dplyr::full_join(national, total_cases_counties)
View(all_totals)
View(total_cases_counties)
all_totals %>% dplyr::filter(cases != county_total_cases)
national_county_diff <- all_totals %>% dplyr::filter(cases != county_total_cases)
all_totals %>% dplyr::select(date) %>%
dplyr::n()
all_totals %>% dplyr::select(date) %>%
dplyr::n(date)
all_totals %>% dplyr::n(date)
?dplyr::n
all_totals %>% dplyr::summarise(n())
all_totals %>% dplyr::select(date) %>%
dplyr::summarise(n())
national_county_diff %>% dplyr::select(date) %>%
dplyr::summarise(n())
num_national_county_diff <- national_county_diff %>% dplyr::select(date) %>%
dplyr::summarise(n()) %>% pull()
all_totals <- dplyr::inner_join(national, total_cases_counties)
national_county_diff <- all_totals %>% dplyr::filter(cases != county_total_cases)
num_national_county_diff <- national_county_diff %>% dplyr::select(date) %>%
dplyr::summarise(n()) %>% pull()
num_national_county_diff <- national_county_diff %>% dplyr::select(date) %>%
dplyr::summarise(n()) %>% pull()
num_national_county_diff <- national_county_diff %>% dplyr::select(date) %>%
dplyr::summarise(n()) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
most_deaths <- national %>% group_by(as.Date(date)) %>%
dplyr::summarise(max_newdeaths = max(na.omit(new_deaths))) %>%
dplyr::arrange(desc(max_newdeaths)) %>%
dplyr::filter(max_newdeaths == max(na.omit(max_newdeaths))) %>%
dplyr::select(max_newdeaths) %>% pull()
counties <- dplyr::mutate(counties, new_cases = lag(lead(cases) - cases))
rm(counties$new_cases)
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
counties <- dplyr::mutate(counties, county_state = paste0(county, ", ", state))
counties %>% dplyr::select(county_state == "King County, Washington")
counties %>% dplyr::select(county_state == "King County, Washington")
counties %>% group_by(county_state) %>%
dplyr::select(county_state == "King County, Washington")
counties %>%  dplyr::filter(county_state == "King County, Washington")
View(highest_cases_in_each_state)
counties %>%  dplyr::filter(county_state == "King, Washington")
counties %>%  dplyr::filter(county_state == "King, Washington") %>%
dplyr::mutate(case_increases = lag(lead(cases)-cases))
counties %>%  dplyr::filter(county_state == "King, Washington") %>%
dplyr::mutate(case_increases = lag(lead(cases)-cases)) %>%
dplyr::arrange(desc(case_increases))
counties %>%  dplyr::filter(county_state == "King, Washington") %>%
dplyr::mutate(case_increases = lag(lead(cases)-cases)) %>%
dplyr::arrange(desc(case_increases)) %>%
dplyr::filter(case_increases == max(case_increases))
counties %>%  dplyr::filter(county_state == "King, Washington") %>%
dplyr::mutate(case_increases = lag(lead(cases)-cases)) %>%
dplyr::arrange(desc(case_increases)) %>% dplyr::filter(date == "2022-01-18")
counties %>%  dplyr::filter(county_state == "King, Washington") %>%
dplyr::mutate(case_increases = lag(lead(cases)-cases)) %>%
dplyr::arrange(desc(case_increases)) %>% dplyr::filter(date == "2022-01-18") %>%
dplyr::select(date, case_increases)
counties %>%  dplyr::filter(county_state == "King, Washington") %>%
dplyr::mutate(case_increases = lag(lead(cases)-cases)) %>%
dplyr::arrange(desc(case_increases)) %>% dplyr::filter(date == "2022-01-18") %>%
dplyr::select(date, case_increases) %>% pull()
counties %>%  dplyr::filter(county_state == "King, Washington") %>%
dplyr::mutate(case_increases = lag(lead(cases)-cases)) %>%
dplyr::arrange(desc(case_increases)) %>% dplyr::filter(date == "2022-01-18") %>%
dplyr::select(date) %>% pull()
my_answer <- counties %>%  dplyr::filter(county_state == "King, Washington") %>%
dplyr::mutate(case_increases = lag(lead(cases)-cases)) %>%
dplyr::arrange(desc(case_increases)) %>% dplyr::filter(date == "2022-01-18") %>%
dplyr::select(date) %>% pull()
dplyr::inner_join(national, total_cases_counties) %>% pull()
all_totals <- dplyr::inner_join(national, total_cases_counties)
all_totals <- dplyr::inner_join(national, total_cases_counties)
all_totals <- dplyr::inner_join(national, total_cases_counties)
all_totals <- dplyr::inner_join(national, total_cases_counties)
all_totals <- dplyr::inner_join(national, total_cases_counties)
all_totals <- dplyr::inner_join(national, total_cases_counties)
pnorm(80, 72.6, 4.78)
pnorm(80, 72.6, 4.78) - pnorm(60, 72.6, 4.78)
qnorm(0.95, 72.6, 4.78)
1 - pnorm(70, 72.6, 4.78)
27/212
sqrt((0.1273585)(1-0.1273585)/212)
sqrt((0.1273585)(1-0.1273585)/212))
(0.1273585)(1-0.1273585)/212)
(0.1273585)(1-0.1273585)/212
(0.1273585) * (1-0.1273585)
0.1111383 / 212
0.0005242373**1/2
sqrt(0.1273585 * (1-0.1273585) / 212)
sqrt(0.1 * (1-0.1) / 212)
40 * 0.16
sqrt(0.16 * (1-0.16) / 40)
sqrt(0.16 * (1-0.16) / 90)
qnorm(0.025, 0, 1)
64/752
sqrt(0.08510638 * (1-0.08510638) / 752)
qnorm(0.05, 0, 1)
abs(qnorm(0.05, 0, 1))
0.08510638 - (1.644854 * 0.01017554)
0.08510638 + (1.644854 * 0.01017554)
0.0683691 * 752
0.1018437 * 752
142/603
abs(qnorm(0.025, 0, 1))
sqrt(0.2354892 * (1-0.2354892) / 603)
0.2354892 + (1.959964 * 0.017279)
0.2354892 - (1.959964 * 0.017279)
0.201623
0.201623 * 603
0.2693554 * 603
sqrt(0.50 * (1-0.50) / 40)
sqrt(0.50 * (1-0.50) / 90)
sqrt(0.16 * (1-0.16) / 40)
sqrt(0.16 * (1-0.16) / 90)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='dhruvj20',
token='B776C2CAE2F07C85531AC9405F179CF1',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dhruvj20',
token='B776C2CAE2F07C85531AC9405F179CF1',
secret='9BxKdvYP4Rhc75zWtBmea3EeuJxctzw+LwaaQtDr')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
prop.test((69, 454), (105, 680), conf.level = 0.95)
prop.test(x = c(69, 454), n = c(105, 680), conf.level = 0.95)
prop.test(69, 100, conf.level = 0.95)
1 - pnorm(1200, 1087, 98)
setwd("C:/Users/dhruv/Downloads/INFO 201/final-deliverable-p03-dhruvj20")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(plotly)
library(shiny)
library(stringr)
library(data.table)
### Source: https://www.geeksforgeeks.org/formatting-numbers-and-strings-in-r-programming-format-function/#
### Source: https://cran.r-project.org/web/packages/stringr/vignettes/stringr.html#:~:text=str_pad()%20pads%20a%20string,%2C%20right%2C%20or%20both%20sides.&text=(You%20can%20pad%20with%20other,by%20using%20the%20pad%20argument.)
### Source: https://www.geeksforgeeks.org/convert-column-classes-of-data-table-in-r/
### Source: https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf
### Source: https://www.tutorialspoint.com/how-to-check-if-a-value-exists-in-an-r-data-frame-or-not
### Source: https://rstudio-pubs-static.s3.amazonaws.com/148979_34c44668be5045808581dda212e1c131.html
### Source: https://dplyr.tidyverse.org/reference/count.html#:~:text=count()%20lets%20you%20quickly,summarise(n%20%3D%20n())%20.
### Source: https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf
### Source: https://rstudio.github.io/cheatsheets/strings.pdf
### Source: https://sparkbyexamples.com/r-programming/add-row-to-dataframe-in-r/#:~:text=To%20add%20a%20new%20row%20to%20the%20DataFrame%20(data.,the%20end%20of%20the%20dataframe.
### Source: https://stackoverflow.com/questions/24011246/deleting-rows-that-are-duplicated-in-one-column-based-on-the-conditions-of-anoth
### Source: ### https://r-graph-gallery.com/line-chart-ggplot2.html
### Source: https://canvas.uw.edu/courses/1643812/files/folder/Lectures_PG?preview=108264142
### Source: https://canvas.uw.edu/courses/1643812/files/folder/Lectures_PG?preview=108374725
### Source: https://shiny.posit.co/r/gallery/widgets/widget-gallery/
### Source: https://shiny.posit.co/r/reference/shiny/1.7.4/sliderinput
### Source: https://gallery.shinyapps.io/081-widgets-gallery/
### Source: https://stackoverflow.com/questions/24173595/r-shiny-using-a-slider-value-to-no-decimal-places
### Source: https://www.statology.org/r-get-column-names/#:~:text=To%20get%20the%20column%20names%20in%20a%20data%20frame%20in,What%20is%20this%3F&text=points%22%20%22team%22-,The%20result%20is%20a%20vector%20that%20contains%20all%20four%20column,frame%20listed%20in%20alphabetical%20order.
### Source: https://stackoverflow.com/questions/35040781/alignment-of-control-widgets-on-fluidpage-in-shiny-r
### Source: https://stackoverflow.com/questions/65472014/how-can-i-make-an-interactive-line-graph-through-shiny
### Source: https://stackoverflow.com/questions/60887910/how-to-include-all-the-observations-in-the-range-of-sliderinput-in-shiny-in-r
### Source: https://sparkbyexamples.com/r-programming/r-select-all-columns-except-column/#:~:text=To%20select%20all%20columns%20except,function%20from%20the%20dplyr%20package.
### Source: https://stackoverflow.com/questions/58448118/warning-jsonlite-in-shiny-input-to-asjsonkeep-vec-names-true-is-a-named-vecto
### Source: https://www.digitalocean.com/community/tutorials/r-melt-and-cast-function
### Source: https://www.statology.org/plot-multiple-columns-in-r/
### Source: https://stackoverflow.com/questions/44615406/error-in-as-data-frame-default-cannot-coerce-class-creactiveexpr-reactive
movies_data <- read.csv("Movies.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
filtered_data <- movies_data %>% select(Release.Date) %>%
filter(Release.Date != "NA")
adding_year <- filtered_data %>% mutate(release_year = str_sub(Release.Date,
str_length(Release.Date) - 4, str_length(Release.Date)))
adding_year_table <- data.table(adding_year)
casting_year <- data.frame(adding_year_table[ , release_year := as.integer(release_year)])
adding_month <- casting_year %>% mutate(release_month =
str_sub(Release.Date, 1, str_length(Release.Date) - 8))
adding_month_table <- data.table(adding_month)
trimming_month <- data.frame(adding_month_table[,
release_month := str_trim(release_month, side = c("both"))])
filter_by_month <- function(month){
trimming_month %>% filter(release_month == month) %>%
arrange(release_year) %>% group_by(release_year) %>% select(release_year) %>% count()
}
January <- filter_by_month("January")
February <- filter_by_month("February")
March <- filter_by_month("March")
April <- filter_by_month("April")
May <- filter_by_month("May")
June <- filter_by_month("June")
July <- filter_by_month("July")
August <- filter_by_month("August")
September <- filter_by_month("September")
October <- filter_by_month("October")
November <- filter_by_month("November")
December <- filter_by_month("December")
add_sequence_function <- function(dataset){
year = 1970
while (year <= 2023){
if (any(dataset$release_year) == year){
}
else {
dataset[nrow(dataset) + 1,] <- list(year, 0)
year = year + 1
}
}
dataset %>% arrange(release_year)
return (dataset)
}
creating_plottable_df <- function(dataset){
add_sequence_function(dataset) %>% arrange(release_year) %>%
group_by(release_year) %>% arrange(release_year, -n) %>%
filter(duplicated(release_year) == FALSE)
}
January_final <- creating_plottable_df(January)
February_final <- creating_plottable_df(February)
March_final <- creating_plottable_df(March)
April_final <- creating_plottable_df(April)
May_final <- creating_plottable_df(May)
June_final <- creating_plottable_df(June)
July_final <- creating_plottable_df(July)
August_final <- creating_plottable_df(August)
September_final <- creating_plottable_df(September)
October_final <- creating_plottable_df(October)
November_final <- creating_plottable_df(November)
December_final <- creating_plottable_df(December)
all_data_one_frame <- data.frame(
Month = rep(c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"), each = nrow(January_final)),
Year = rep(January_final$release_year, times = 12),
Count = c(January_final$n, February_final$n, March_final$n, April_final$n, May_final$n,
June_final$n, July_final$n, August_final$n, September_final$n,
October_final$n, November_final$n, December_final$n)
all_data_one_frame <- data.frame(
Month = rep(c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"), each = nrow(January_final)),
Year = rep(January_final$release_year, times = 12),
Count = c(January_final$n, February_final$n, March_final$n, April_final$n, May_final$n,
June_final$n, July_final$n, August_final$n, September_final$n,
October_final$n, November_final$n, December_final$n)
)
all_data_one_frame <- data.frame(
Month = rep(c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"), each = nrow(January_final)),
Year = rep(January_final$release_year, times = 12),
Count = c(January_final$n, February_final$n, March_final$n, April_final$n, May_final$n,
June_final$n, July_final$n, August_final$n, September_final$n,
October_final$n, November_final$n, December_final$n)
)
all_data_one_frame <- data.frame(
Month = rep(c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"), each = nrow(January_final)),
Year = rep(January_final$release_year, times = 12),
Count = c(January_final$n, February_final$n, March_final$n, April_final$n, May_final$n,
June_final$n, July_final$n, August_final$n, September_final$n,
October_final$n, November_final$n, December_final$n)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
